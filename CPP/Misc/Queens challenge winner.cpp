#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <sstream>
#include <fstream>
#include <iostream>
#include <algorithm>
#include <sys/time.h>
#ifndef LOCAL
#define NDEBUG
#endif
#include <cassert>

using namespace std;

#ifdef LOCAL
#    define MAX_TIME 16.
#    define FREQUENCY 3013616601.
#else
#    define MAX_TIME 10.
#    define FREQUENCY 2500650245.
#endif

#ifdef LOCAL
#    define BP callback()
#    define PZ callback(true)
#else
#    define BP() {}
#    define PZ() {}
#endif

#ifdef __amd64
__inline__ uint64_t rdtsc() { uint64_t a, d; __asm__ volatile ("rdtsc" : "=a" (a), "=d" (d)); return (d<<32) | a; }
#else
__inline__ uint64_t rdtsc() { uint64_t x; __asm__ volatile ("rdtsc" : "=A" (x)); return x; }
#endif

#define CPU_TIME
#if defined CPU_TIME && defined LOCAL
#define TICKS() clock()
#define CLOCK_SCALE CLOCKS_PER_SEC
#else
#define TICKS() rdtsc()
#define CLOCK_SCALE FREQUENCY
#endif

uint32_t seed = 123456789; uint32_t nextInt() { return (seed = 1664525 * seed + 1013904223); } double nextDouble() { return (1./~((uint32_t)0)) * nextInt(); } uint32_t nextInt(int m) { return m * nextDouble(); }
struct Clock { uint64_t startTime, elapsedTime; Clock() { start(); } void start() { startTime = TICKS(); elapsedTime = 0; }; uint64_t update() { uint64_t absoluteTime = TICKS(); elapsedTime += absoluteTime - startTime; startTime = absoluteTime; return elapsedTime; } } clock_;
struct Timer { uint64_t start; double duration; Timer(double duration) : duration(duration) { start = clock_.update(); } Timer() : duration(MAX_TIME) { clock_.start(); start = clock_.update(); } double left() { return 1. - spent(); }; double spent() { return (clock_.update() - start) / (double)CLOCK_SCALE / duration; }; };
void printFrequency() { uint64_t endClock, startClock = rdtsc(); timeval tv, tv2; gettimeofday(&tv, NULL); do { gettimeofday(&tv2, NULL); } while (tv2.tv_sec - tv.tv_sec + (tv2.tv_usec - tv.tv_usec) * 1e-6 < 1.); endClock = rdtsc(); cerr << "FEQUENCY " << endClock-startClock << endl; }

#define MAXN 101
int pscore;

int N;
int QR[MAXN];
int QC[MAXN];
int BR[MAXN];
int BC[MAXN];
int BD[2*MAXN];
int BD2[2*MAXN];
int constraints;
int maxr;
int maxc;
int H[MAXN][MAXN];
int offsetr;
int offsetc;

vector<vector<int>> precomputed =
{
    /* 8	21	*/ {0,4,7,5,2,6,1,3},
    /* 8	21	*/ {2,4,1,7,5,3,6,0},
    /* 8	21	*/ {7,2,0,5,1,4,6,3},
    /* 8	21	*/ {0,5,7,2,6,3,1,4},
    /* 8	21	*/ {3,1,6,2,5,7,4,0},
    /* 8	21	*/ {3,0,4,7,5,2,6,1},
    /* 8	21	*/ {6,0,2,7,5,3,1,4},
    /* 8	21	*/ {1,6,2,5,7,4,0,3},
    /* 8	21	*/ {1,7,5,0,2,4,6,3},
    /* 8	21	*/ {0,6,3,5,7,1,4,2},
    /* 9	26	*/ {7,4,2,0,6,3,5,8,1},
    /* 9	26	*/ {8,5,3,1,7,4,6,0,2},
    /* 9	26	*/ {1,8,5,2,4,7,0,3,6},
    /* 9	26	*/ {6,3,0,7,4,2,5,8,1},
    /* 9	26	*/ {0,7,4,2,5,8,1,3,6},
    /* 9	26	*/ {1,5,8,2,4,7,3,0,6},
    /* 9	26	*/ {2,6,8,3,1,4,7,5,0},
    /* 9	26	*/ {5,0,6,3,7,2,4,8,1},
    /* 9	26	*/ {0,6,3,5,8,1,4,2,7},
    /* 9	26	*/ {8,2,5,1,6,4,0,7,3},
    /* 10	33	*/ {3,1,8,4,9,7,5,2,0,6},
    /* 10	33	*/ {6,0,2,5,7,9,4,8,1,3},
    /* 10	33	*/ {5,1,9,0,6,3,7,2,4,8},
    /* 10	33	*/ {3,5,2,8,1,7,4,6,9,0},
    /* 10	33	*/ {9,1,3,7,2,8,5,0,4,6},
    /* 10	33	*/ {1,8,0,7,4,2,9,6,3,5},
    /* 10	33	*/ {4,2,9,3,6,8,1,5,7,0},
    /* 10	33	*/ {8,1,5,0,9,6,4,2,7,3},
    /* 10	33	*/ {0,5,7,9,3,8,2,4,6,1},
    /* 10	33	*/ {1,7,9,2,8,5,3,0,6,4},
    /* 11	39	*/ {0,6,10,5,7,1,3,8,2,4,9},
    /* 11	39	*/ {3,0,9,7,4,2,8,5,1,10,6},
    /* 11	39	*/ {9,2,5,10,4,7,0,3,6,8,1},
    /* 11	39	*/ {7,0,2,5,9,6,3,10,4,1,8},
    /* 11	39	*/ {0,10,5,7,2,4,8,1,9,6,3},
    /* 11	39	*/ {0,6,9,5,8,1,4,2,7,10,3},
    /* 11	39	*/ {9,2,4,8,1,3,6,10,7,5,0},
    /* 11	39	*/ {2,9,6,0,7,4,1,5,8,10,3},
    /* 11	39	*/ {6,2,10,5,1,8,4,7,3,0,9},
    /* 11	39	*/ {1,7,9,3,8,2,4,6,10,0,5},
    /* 12	46	*/ {11,0,8,3,5,10,2,9,6,4,7,1},
    /* 12	46	*/ {1,9,6,3,11,4,8,10,5,7,2,0},
    /* 12	46	*/ {0,2,7,5,8,11,9,3,6,4,1,10},
    /* 12	46	*/ {0,10,1,7,9,3,8,2,4,6,11,5},
    /* 12	46	*/ {0,9,1,10,7,3,8,2,4,6,11,5},
    /* 12	46	*/ {0,11,9,5,1,8,4,2,7,10,6,3},
    /* 12	46	*/ {1,11,4,6,9,3,10,7,2,8,5,0},
    /* 12	46	*/ {3,11,2,5,9,4,10,8,6,1,7,0},
    /* 12	46	*/ {10,3,1,6,4,9,11,8,5,7,2,0},
    /* 12	46	*/ {0,2,7,5,10,8,4,11,3,6,9,1},
    /* 13	53	*/ {1,12,8,6,3,9,2,4,10,7,5,11,0},
    /* 13	53	*/ {12,1,4,6,9,3,10,8,2,5,7,0,11},
    /* 13	53	*/ {1,11,4,7,10,3,9,2,5,8,6,0,12},
    /* 13	53	*/ {11,1,8,5,2,9,3,10,7,4,6,12,0},
    /* 13	53	*/ {1,12,5,7,10,4,2,9,3,6,8,11,0},
    /* 13	53	*/ {12,0,6,8,5,2,9,3,10,7,4,11,1},
    /* 13	53	*/ {11,0,4,6,9,3,10,8,2,5,7,1,12},
    /* 13	53	*/ {0,12,6,4,7,10,3,9,2,5,8,1,11},
    /* 13	53	*/ {0,11,5,7,10,4,2,9,3,6,8,12,1},
    /* 13	53	*/ {11,0,7,5,2,8,10,3,9,6,4,1,12},
    /* 14	63	*/ {13,9,0,2,4,7,12,10,3,6,11,5,8,1},
    /* 14	63	*/ {3,1,4,7,10,13,11,8,5,2,6,9,0,12},
    /* 14	63	*/ {0,13,4,7,1,12,9,6,3,10,2,5,8,11},
    /* 14	63	*/ {1,12,9,6,3,5,11,13,10,7,4,8,0,2},
    /* 14	63	*/ {12,0,9,6,2,5,8,11,13,10,7,4,1,3},
    /* 14	63	*/ {12,0,13,7,4,1,8,10,5,2,11,9,6,3},
    /* 14	63	*/ {0,10,1,11,6,12,9,2,4,7,3,8,13,5},
    /* 14	63	*/ {2,9,3,1,8,11,5,10,13,6,4,7,12,0},
    /* 14	63	*/ {0,11,6,4,9,12,5,2,10,7,13,8,3,1},
    /* 14	63	*/ {2,0,8,12,7,9,3,5,13,10,6,11,1,4},
    /* 15	71	*/ {14,11,1,5,7,10,4,2,12,9,6,8,13,0,3},
    /* 15	71	*/ {13,0,8,6,1,9,11,5,3,10,12,7,4,2,14},
    /* 15	71	*/ {11,14,1,6,8,5,2,12,10,4,7,9,13,3,0},
    /* 15	71	*/ {14,2,4,7,12,10,3,5,11,9,1,6,8,0,13},
    /* 15	71	*/ {1,12,7,0,8,11,4,10,3,5,9,13,6,2,14},
    /* 15	71	*/ {1,14,6,8,13,5,3,9,11,4,2,7,10,12,0},
    /* 15	71	*/ {1,14,5,10,8,3,11,4,2,9,6,13,7,12,0},
    /* 15	71	*/ {0,12,10,7,2,4,11,9,3,5,13,8,6,14,1},
    /* 15	71	*/ {1,4,13,8,12,7,3,11,2,5,9,6,10,0,14},
    /* 15	71	*/ {13,0,9,4,6,11,3,10,12,5,8,1,7,2,14},
    /* 16	81	*/ {1,14,0,13,7,9,11,2,5,3,12,10,8,6,4,15},
    /* 16	81	*/ {14,1,15,2,8,6,4,13,10,12,3,5,7,9,11,0},
    /* 16	81	*/ {2,0,7,9,14,8,13,4,12,5,11,6,10,3,1,15},
    /* 16	81	*/ {15,1,3,10,6,11,5,12,4,13,8,14,9,7,0,2},
    /* 16	81	*/ {1,14,2,8,6,11,13,5,12,4,7,10,15,9,0,3},
    /* 16	81	*/ {1,14,2,10,6,11,5,12,4,13,7,9,15,8,0,3},
    /* 16	81	*/ {1,15,13,0,6,8,11,5,12,2,4,10,7,9,14,3},
    /* 16	81	*/ {1,15,13,0,7,9,11,5,2,4,12,10,8,6,14,3},
    /* 16	81	*/ {3,0,8,15,9,7,13,4,12,5,11,6,10,2,14,1},
    /* 16	81	*/ {3,0,9,15,10,7,4,12,5,13,11,6,8,2,14,1},
    /* 17	91	*/ {1,15,2,7,10,13,5,12,4,11,3,6,9,16,8,0,14},
    /* 17	91	*/ {15,1,14,9,6,3,11,4,12,5,13,10,7,0,8,16,2},
    /* 17	91	*/ {14,0,8,16,7,10,3,5,12,4,11,13,6,9,2,15,1},
    /* 17	91	*/ {1,15,2,9,6,13,11,4,12,5,3,10,7,16,8,0,14},
    /* 17	91	*/ {1,16,14,6,8,10,5,13,2,4,12,7,9,11,0,15,3},
    /* 17	91	*/ {1,16,14,6,9,7,12,4,2,13,5,10,8,11,0,15,3},
    /* 17	91	*/ {2,16,8,0,7,10,13,5,12,4,11,3,6,9,14,1,15},
    /* 17	91	*/ {2,16,8,0,9,6,13,11,4,12,5,3,10,7,14,1,15},
    /* 17	91	*/ {3,15,0,11,8,10,5,13,2,4,12,7,9,6,14,16,1},
    /* 17	91	*/ {3,15,0,11,9,7,12,4,2,13,5,10,8,6,14,16,1},
    /* 18	103	*/ {17,0,16,7,2,10,8,15,5,3,11,14,12,6,9,1,4,13},
    /* 18	103	*/ {1,17,0,6,15,12,10,7,13,3,5,2,14,9,11,8,4,16},
    /* 18	103	*/ {2,0,11,8,15,9,16,13,4,7,5,14,12,10,3,6,17,1},
    /* 18	103	*/ {0,3,16,9,13,8,4,14,12,6,15,5,11,1,10,7,17,2},
    /* 18	103	*/ {16,0,2,9,11,8,4,15,13,5,7,12,14,17,6,10,3,1},
    /* 18	103	*/ {17,3,16,2,10,5,9,1,13,4,14,12,8,6,11,7,0,15},
    /* 18	103	*/ {2,0,10,17,9,12,4,8,14,5,13,15,7,3,11,6,16,1},
    /* 18	103	*/ {17,2,0,16,6,8,12,4,13,5,14,11,3,7,9,1,15,10},
    /* 18	103	*/ {0,2,12,17,15,10,4,11,5,3,13,6,14,9,7,1,8,16},
    /* 18	103	*/ {0,17,15,4,6,10,3,14,12,5,13,2,7,11,8,1,9,16},
    /* 19	114	*/ {18,2,0,8,11,9,15,13,5,3,12,14,7,4,10,1,16,6,17},
    /* 19	114	*/ {16,3,0,8,10,17,6,14,12,4,13,7,5,2,11,9,15,18,1},
    /* 19	114	*/ {0,2,9,17,13,8,10,15,4,14,5,3,6,11,7,12,18,16,1},
    /* 19	114	*/ {0,2,10,16,7,12,15,13,6,4,14,5,3,9,11,8,18,1,17},
    /* 19	114	*/ {0,2,11,16,8,12,14,4,6,15,13,5,3,9,7,10,18,1,17},
    /* 19	114	*/ {0,2,12,7,16,14,9,5,13,15,3,6,4,10,8,11,18,1,17},
    /* 19	114	*/ {0,2,13,9,17,8,10,15,3,14,4,7,5,11,6,12,18,16,1},
    /* 19	114	*/ {0,2,13,16,9,7,4,14,12,15,6,3,5,10,8,18,11,1,17},
    /* 19	114	*/ {0,2,13,16,9,11,14,4,6,3,12,15,5,8,10,18,7,1,17},
    /* 19	114	*/ {0,2,14,9,13,10,16,3,5,12,4,15,7,11,6,8,18,1,17},
    /* 20	127	*/ {18,15,19,0,2,7,9,6,12,14,4,17,5,13,10,16,11,8,1,3},
    /* 20	127	*/ {19,3,0,8,10,12,7,18,16,6,13,15,4,9,14,5,11,1,17,2},
    /* 20	127	*/ {3,19,4,2,9,12,15,7,14,6,18,5,13,17,10,8,11,1,16,0},
    /* 20	127	*/ {1,19,0,2,10,8,17,9,13,16,14,4,7,5,3,12,6,11,18,15},
    /* 20	127	*/ {3,0,6,19,11,14,12,9,5,17,4,16,13,8,10,2,7,15,18,1},
    /* 20	127	*/ {0,19,17,1,6,12,10,4,7,15,13,16,2,5,8,11,9,18,3,14},
    /* 20	127	*/ {0,2,4,11,13,17,12,5,15,6,14,16,8,3,7,10,19,9,1,18},
    /* 20	127	*/ {0,2,4,15,8,11,14,16,13,6,17,3,5,9,12,10,19,7,1,18},
    /* 20	127	*/ {0,2,4,15,10,8,14,17,13,16,7,5,3,9,12,19,11,6,1,18},
    /* 20	127	*/ {0,2,5,8,11,13,18,16,14,7,4,15,9,6,3,10,12,19,17,1},
    /* 21	139	*/ {2,19,16,0,9,11,13,5,7,17,14,3,15,4,8,10,12,6,18,20,1},
    /* 21	139	*/ {1,18,5,19,12,9,11,16,4,6,3,17,14,7,13,10,8,15,0,2,20},
    /* 21	139	*/ {18,0,19,12,7,9,3,13,15,4,6,16,5,11,14,17,10,8,1,20,2},
    /* 21	139	*/ {1,16,18,2,11,13,10,3,5,14,4,17,15,8,12,7,9,19,6,0,20},
    /* 21	139	*/ {1,19,17,12,2,7,11,6,15,5,16,14,4,8,18,9,13,10,0,3,20},
    /* 21	139	*/ {0,19,15,1,8,11,9,14,5,17,4,16,13,6,10,7,2,12,20,18,3},
    /* 22	153	*/ {21,1,17,0,20,9,11,8,14,4,6,18,15,5,16,13,10,3,7,12,19,2},
    /* 22	153	*/ {1,20,17,0,21,12,9,7,10,15,3,5,16,18,6,14,11,13,8,4,2,19},
    /* 22	153	*/ {3,21,4,1,14,9,11,8,15,17,19,5,18,6,13,10,12,7,2,16,20,0},
    /* 23	167	*/ {19,21,1,7,11,2,14,17,10,5,16,6,4,18,15,13,9,20,12,8,3,0,22},
    /* 23	167	*/ {21,3,18,0,11,8,10,15,4,19,16,6,17,5,13,9,14,2,7,12,20,22,1},
    /* 23	167	*/ {20,3,1,10,21,16,11,7,14,6,19,5,15,17,4,8,12,9,13,0,18,22,2},
    /* 23	167	*/ {20,22,3,0,13,10,8,6,14,16,18,5,7,17,4,11,19,15,9,12,1,21,2},
    /* 24	182	*/ {0,22,3,23,15,1,12,10,16,11,5,18,4,17,7,20,6,14,9,13,8,19,21,2},
    /* 24	182	*/ {22,1,3,23,15,2,14,10,13,4,6,18,16,5,20,17,9,7,12,8,11,19,21,0},
    /* 25	197	*/ {1,24,0,8,15,12,21,13,16,9,5,20,4,17,7,18,6,11,14,10,3,23,19,22,2},
    /* 25	197	*/ {0,22,3,21,16,9,11,15,5,19,17,7,4,6,20,18,14,12,8,13,1,10,24,2,23},
    /* 26	214	*/ {1,24,22,2,0,14,11,23,12,9,16,5,19,21,7,18,6,15,10,4,17,8,13,25,3,20},
    /* 26	214	*/ {25,2,0,24,9,11,16,14,12,8,21,19,7,22,4,17,10,20,6,15,13,18,1,23,5,3},
    /* 26	214	*/ {4,25,0,2,19,13,16,14,8,11,21,6,18,22,5,9,17,10,23,15,12,24,7,20,1,3},
    /* 26	214	*/ {1,3,24,2,14,17,15,10,23,16,6,8,18,7,22,19,21,12,9,4,13,11,20,5,0,25},
    /* 26	214	*/ {1,25,4,13,24,10,17,15,6,21,9,7,19,8,18,5,22,20,11,16,14,12,3,23,0,2},
    /* 27	231	*/ {26,23,1,15,10,25,14,3,9,16,13,5,7,22,19,6,20,17,11,21,12,18,0,8,4,2,24},
    /* 27	231	*/ {24,4,15,0,26,11,23,14,12,10,5,20,6,21,19,8,16,9,7,18,2,17,13,25,22,3,1},
    /* 27	231	*/ {25,3,1,14,4,24,12,15,20,10,17,5,8,23,18,6,21,7,16,11,13,2,9,26,19,22,0},
    /* 27	231	*/ {26,1,23,0,9,12,10,17,22,11,19,7,20,6,8,21,15,4,16,14,3,24,13,5,25,2,18},
    /* 27	231	*/ {0,21,3,26,10,13,20,18,15,7,23,8,5,17,6,9,19,22,14,2,11,16,12,25,4,24,1},
    /* 27	231	*/ {25,23,3,0,9,17,14,5,10,12,21,18,7,22,20,2,16,6,8,11,13,15,26,19,4,24,1},
    /* 27	231	*/ {1,5,25,0,16,11,20,17,15,9,18,22,7,2,8,6,21,19,14,12,10,13,3,26,23,4,24},
    /* 27	231	*/ {1,4,26,0,13,9,16,22,15,17,21,10,7,19,6,3,18,8,12,5,25,14,11,23,20,2,24},
    /* 27	231	*/ {0,5,24,19,23,3,14,9,17,12,7,21,18,6,4,22,8,16,13,10,25,15,1,11,20,26,2},
    /* 27	231	*/ {26,0,3,22,16,8,10,14,23,18,7,19,6,9,20,4,21,12,5,17,13,11,24,1,15,25,2},
    /* 28	248	*/ {26,0,27,1,20,10,25,11,14,12,18,8,22,4,21,5,9,6,19,13,16,23,17,15,24,2,7,3},
    /* 29	266	*/ {0,24,1,27,6,17,10,12,16,23,19,9,22,5,21,11,7,20,3,8,13,15,28,18,14,26,2,4,25},
    /* 29	266	*/ {25,3,26,2,10,15,0,16,13,17,7,22,24,6,21,19,8,12,4,20,18,11,9,14,27,5,1,23,28},
    /* 30	285	*/ {27,4,1,29,2,19,13,26,5,17,12,20,22,7,9,6,21,23,18,11,8,25,3,16,14,10,15,28,24,0},
    /* 30	285	*/ {2,0,28,4,15,26,10,16,14,17,24,9,25,23,21,6,8,11,7,22,13,18,5,19,29,20,12,27,1,3},
    /* 31	304	*/ {29,2,5,28,1,19,12,20,15,17,10,22,3,8,23,25,6,21,7,11,16,14,24,9,18,30,13,26,0,27,4},
    /* 31	304	*/ {1,29,24,2,15,5,27,16,12,19,25,7,9,21,8,22,11,23,20,6,4,26,10,13,17,14,18,30,3,0,28},
    /* 31	304	*/ {1,25,0,24,6,28,18,13,15,19,5,10,23,21,8,4,9,22,27,11,20,17,7,14,12,29,16,30,3,26,2},
    /* 31	304	*/ {2,29,5,30,27,13,16,14,17,10,26,24,12,7,3,8,21,9,22,25,18,11,19,6,15,20,1,23,0,28,4},
    /* 32	324	*/ {1,29,25,28,3,27,2,15,18,11,4,17,23,20,9,6,8,26,7,22,24,19,12,16,21,13,31,10,14,0,30,5},
    /* 33	344	*/ {29,3,32,6,2,13,20,28,14,16,23,8,11,25,10,24,5,27,22,9,7,21,15,18,12,30,17,19,4,1,31,0,26},
    /* 34	366	*/ {32,28,3,0,33,7,17,20,14,12,18,25,5,11,26,24,10,8,23,29,27,9,22,15,19,21,16,31,6,4,1,30,13,2},
    /* 34	366	*/ {33,0,3,11,25,32,16,13,23,18,28,14,7,10,12,29,27,24,6,9,22,26,8,17,15,21,19,31,20,5,30,1,4,2},
    /* 35	388	*/ {4,26,34,2,16,5,32,21,31,22,15,19,9,11,23,8,6,24,28,7,12,27,25,10,18,20,17,13,30,0,14,3,33,29,1},
    /* 35	388	*/ {2,0,34,31,33,16,9,20,14,17,15,21,28,10,3,27,25,7,13,11,24,8,29,5,22,18,12,23,19,4,30,32,26,6,1},
    /* 36	411	*/ {30,35,2,8,1,3,20,28,23,19,12,18,21,7,10,26,11,29,31,6,24,27,25,14,16,9,34,15,17,22,13,32,0,5,33,4},
    /* 37	434	*/ {34,32,35,0,25,1,18,2,17,22,11,19,16,13,24,8,30,5,29,26,12,23,28,4,27,10,15,21,14,20,9,36,31,3,6,33,7},
    /* 37	434	*/ {2,0,34,18,22,32,19,5,33,14,17,6,16,29,10,24,30,28,26,11,9,27,12,8,25,13,7,20,15,23,21,1,3,36,31,35,4},
    /* 37	434	*/ {33,30,0,4,31,21,34,6,12,20,17,25,18,8,10,28,9,11,26,29,3,13,24,32,27,14,23,15,19,16,35,1,22,5,7,2,36},
    /* 37	434	*/ {0,36,34,4,30,1,12,23,20,22,17,14,21,11,24,5,10,28,32,27,3,8,26,9,16,18,25,15,19,31,35,13,7,2,29,6,33},
    /* 37	434	*/ {34,7,0,36,9,24,13,19,30,3,20,22,15,31,27,10,8,26,5,12,28,25,6,14,21,11,16,23,29,18,2,33,17,32,1,35,4},
    /* 37	434	*/ {3,36,32,29,2,4,18,23,19,1,11,15,21,10,28,25,9,12,31,26,8,27,22,13,7,33,17,14,24,34,16,20,6,35,5,0,30},
    /* 38	458	*/ {2,0,5,33,36,23,17,19,24,4,29,20,18,28,6,9,13,8,25,32,30,26,11,31,14,12,22,15,21,27,16,35,3,1,34,10,37,7},
    /* 38	458	*/ {34,0,37,1,4,35,27,12,19,23,14,20,24,7,9,31,13,25,10,32,5,28,8,29,26,16,22,17,15,18,33,6,3,21,11,36,2,30},
    /* 38	458	*/ {7,32,0,8,5,37,16,24,12,34,22,17,25,27,30,10,13,28,9,11,3,29,31,26,14,21,15,20,6,23,18,4,19,35,33,1,36,2},
    /* 38	458	*/ {3,34,2,4,6,36,18,25,23,20,16,10,37,27,11,13,29,26,28,8,24,12,30,7,14,17,33,21,9,22,35,19,15,1,5,31,0,32},
    /* 39	482	*/ {34,0,2,35,16,3,29,21,37,18,14,22,25,6,11,31,24,27,13,10,12,28,4,7,30,26,15,23,33,19,17,8,20,36,9,1,38,5,32},
    /* 39	482	*/ {0,3,38,34,5,14,17,36,23,7,22,16,26,12,27,33,13,9,28,25,10,29,6,30,11,8,19,15,24,18,21,35,4,1,37,20,31,2,32},
    /* 40	508	*/ {2,7,38,1,3,37,20,32,24,35,18,23,19,22,6,9,29,8,11,30,10,31,5,28,12,25,27,16,13,26,17,15,36,4,14,21,39,33,0,34},
    /* 40	508	*/ {2,35,38,4,34,1,19,7,27,36,16,23,17,11,8,29,32,26,13,9,30,12,10,31,6,28,25,14,21,18,22,15,39,37,3,20,33,5,24,0},
    /* 40	508	*/ {0,39,4,7,5,23,28,38,24,18,20,10,19,16,33,11,8,25,30,36,34,32,27,29,9,13,15,17,22,6,21,12,14,26,3,1,31,2,35,37},
    /* 40	508	*/ {4,0,34,38,35,5,2,18,15,6,16,23,26,36,30,28,14,25,27,9,12,8,11,33,7,10,29,32,22,24,21,17,20,13,3,19,37,39,31,1},
    /* 40	508	*/ {33,39,3,32,38,18,6,0,13,15,21,9,24,17,5,29,35,26,10,7,28,31,12,30,8,22,11,23,27,16,19,25,14,36,20,37,2,4,1,34},
    /* 40	508	*/ {0,2,38,36,26,1,3,35,19,16,23,15,20,11,31,14,25,32,28,4,8,33,12,29,13,30,9,21,10,22,17,5,18,24,37,27,7,39,6,34},
    /* 40	508	*/ {0,38,35,1,3,37,32,27,20,15,17,19,23,31,6,8,30,12,14,7,29,10,25,36,9,26,28,13,22,16,34,21,4,24,39,18,33,11,5,2},
    /* 40	508	*/ {1,3,35,9,39,20,2,25,38,18,14,24,17,21,7,26,28,31,13,11,8,37,32,30,27,15,12,6,22,16,19,29,23,33,5,34,0,10,4,36},
    /* 40	508	*/ {0,39,5,7,16,1,24,26,30,35,15,20,14,21,8,13,31,33,28,10,34,32,29,9,11,18,23,12,17,19,22,37,27,4,2,36,6,25,3,38},
    /* 40	508	*/ {39,0,36,4,33,3,21,14,20,35,23,7,22,17,31,10,34,9,11,27,29,32,13,8,12,30,28,24,15,18,2,25,16,19,37,6,26,5,38,1},
    /* 41	532	*/ {2,33,36,40,1,5,23,37,24,13,20,17,15,27,25,11,4,8,30,12,29,34,14,28,32,10,7,26,22,18,16,21,39,9,35,19,31,0,3,6,38},
    /* 42	559	*/ {5,38,0,4,40,24,16,6,35,25,28,22,20,7,23,11,31,8,13,32,10,14,36,27,30,37,29,34,12,17,15,18,21,19,26,1,33,39,3,9,2,41},
    /* 42	559	*/ {39,5,36,1,3,41,18,34,0,20,27,24,21,19,8,10,12,32,26,37,11,31,29,13,6,9,28,30,33,16,23,17,15,22,35,7,14,25,2,4,40,38},
    /* 42	559	*/ {2,5,41,38,3,0,28,21,17,14,26,18,23,36,24,32,34,13,30,7,12,10,35,29,15,33,11,27,31,22,16,25,1,20,6,9,19,8,4,40,37,39},
    /* 42	559	*/ {3,36,33,37,41,2,17,32,4,24,40,15,19,14,20,10,6,27,31,11,28,8,34,9,12,30,35,16,26,23,29,22,25,18,13,7,38,21,0,39,1,5},
    /* 42	559	*/ {2,39,5,38,1,41,37,6,19,16,22,28,21,13,20,34,31,18,32,11,8,10,7,36,29,12,30,9,26,23,14,17,40,24,27,25,15,33,0,3,35,4},
    /* 42	559	*/ {41,37,0,3,8,6,36,39,21,11,16,19,38,23,25,29,15,32,27,9,13,33,5,12,10,30,17,34,4,24,26,28,20,18,14,22,1,40,2,31,7,35},
    /* 42	559	*/ {36,41,4,6,3,24,2,40,19,26,18,21,27,35,20,15,7,9,13,32,29,33,11,37,28,30,12,34,16,14,23,25,5,17,31,22,10,8,39,1,38,0},
    /* 43	585	*/ {3,40,37,41,36,14,2,5,18,23,25,19,11,20,35,21,9,12,30,32,7,10,38,34,28,13,8,27,33,26,16,22,15,17,24,29,1,6,39,31,42,4,0},
    /* 44	613	*/ {39,3,42,0,41,1,7,31,19,22,15,38,24,27,21,6,14,34,10,13,30,37,11,32,28,12,8,33,36,17,29,16,25,23,20,18,5,40,4,9,35,2,26,43},
    /* 44	613	*/ {39,37,43,0,3,5,24,26,42,10,25,17,22,18,12,28,8,31,14,36,9,15,30,35,33,16,11,34,32,40,23,13,19,21,29,38,20,27,2,41,6,1,7,4},
    /* 44	613	*/ {43,2,0,31,8,42,9,22,40,27,16,28,23,18,26,15,38,11,14,5,30,12,35,37,32,13,33,10,17,24,39,21,19,25,36,20,29,34,3,7,4,1,41,6},
    /* 45	641	*/ {2,38,36,39,7,44,3,19,25,15,41,24,22,17,32,29,9,12,5,13,11,37,33,30,16,34,31,10,8,27,18,21,28,14,20,43,35,26,23,40,1,4,42,0,6},
    /* 45	641	*/ {39,43,1,38,0,3,42,44,10,26,18,23,21,19,29,16,13,8,31,33,27,32,5,7,34,12,14,30,17,9,6,36,24,28,20,25,40,22,4,11,15,41,35,37,2},
    /* 45	641	*/ {2,39,43,7,1,3,42,25,19,21,18,20,27,36,15,31,8,24,35,41,13,34,32,29,12,9,11,16,10,6,33,30,26,23,17,22,14,28,4,44,40,37,5,38,0},
    /* 45	641	*/ {4,2,33,43,24,3,41,37,5,17,22,6,25,16,20,30,27,31,35,38,11,9,14,32,34,8,13,29,12,36,19,21,10,26,28,15,18,23,0,44,1,40,42,39,7},
    /* 46	670	*/ {2,43,6,40,3,23,33,4,30,22,44,19,8,16,31,20,39,17,29,13,32,35,11,38,12,34,36,10,14,24,37,18,25,15,26,5,27,21,28,45,41,0,9,7,42,1},
    /* 46	670	*/ {8,44,38,7,43,37,5,22,14,4,2,20,25,23,21,15,35,29,36,33,13,32,10,39,41,9,12,16,31,34,27,18,28,6,24,26,30,19,17,11,1,42,40,45,0,3},
    /* 47	699	*/ {46,0,45,4,1,43,9,31,28,25,21,17,29,20,18,24,7,36,32,40,10,16,34,12,37,33,3,13,38,14,35,23,30,27,15,22,19,5,26,6,42,11,2,8,44,41,39},
    /* 48	730	*/ {7,4,47,45,39,3,44,20,5,43,19,29,16,28,30,27,40,18,37,14,10,13,15,34,8,33,12,9,42,35,32,36,21,6,25,31,24,17,23,26,11,22,41,2,38,1,46,0},
    /* 48	730	*/ {43,4,40,42,0,2,24,7,16,19,46,27,25,18,35,29,38,8,17,14,37,15,31,11,39,36,13,33,12,41,34,21,9,26,32,20,22,44,30,28,6,10,23,5,45,47,1,3},
    /* 49	760	*/ {8,47,3,12,45,5,44,0,37,20,30,24,19,29,16,18,28,39,33,38,34,15,4,41,14,35,13,10,6,17,11,36,31,22,25,27,32,21,23,43,26,2,48,40,9,7,1,42,46},
    /* 49	760	*/ {45,6,41,43,0,46,13,40,31,26,3,21,18,29,23,19,34,9,15,10,32,35,37,8,4,36,12,14,30,11,38,5,33,22,28,25,17,20,16,27,24,7,42,1,39,48,44,2,47},
    /* 49	760	*/ {2,40,6,43,0,48,23,8,42,25,28,21,45,27,19,24,14,10,31,39,17,4,33,12,36,11,41,34,15,35,38,13,16,18,22,30,26,29,32,20,7,1,3,46,44,9,37,5,47},
    /* 49	760	*/ {4,46,1,5,42,48,24,22,18,41,6,30,19,29,25,21,39,8,31,40,13,33,36,9,14,10,35,7,15,11,38,34,20,27,32,16,28,26,43,23,17,3,37,44,12,0,2,47,45},
    /* 50	791	*/ {48,46,3,49,4,38,40,27,2,7,47,26,23,25,22,29,15,24,6,14,9,34,39,41,8,17,13,36,32,11,35,37,42,16,19,21,33,30,28,20,31,44,12,45,18,0,5,43,10,1},
    /* 50	791	*/ {4,1,3,49,6,42,48,5,30,32,19,17,24,29,35,22,27,14,26,36,12,40,37,11,44,39,9,13,38,34,43,15,7,18,23,25,31,28,20,33,16,21,8,10,47,0,2,46,41,45},
    /* 51	823	*/ {43,0,3,8,40,34,44,47,45,25,2,21,19,22,33,27,24,7,11,14,17,41,16,38,35,42,39,9,32,12,15,37,46,13,30,23,20,26,36,18,31,28,10,29,4,48,5,49,1,6,50},
    /* 51	823	*/ {47,1,4,7,50,40,3,44,38,24,16,25,32,18,21,28,42,35,14,30,8,13,15,17,43,41,34,37,11,9,39,10,33,20,29,26,48,22,19,23,2,27,31,46,12,5,36,45,0,6,49},
    /* 51	823	*/ {42,45,48,12,5,8,2,0,20,23,27,44,33,35,40,28,22,24,18,10,36,41,37,11,7,15,13,6,38,34,14,39,43,19,31,29,25,32,30,21,17,26,16,4,9,49,3,46,50,47,1},
    /* 52	855	*/ {8,44,50,7,2,45,3,9,47,40,1,23,18,33,21,29,32,16,19,34,37,39,41,36,12,14,6,13,15,38,11,42,10,43,28,31,20,27,30,22,25,17,35,48,26,24,5,0,51,49,4,46},
    /* 53	889	*/ {45,51,4,41,5,9,47,50,3,22,10,35,29,21,28,25,12,33,30,18,42,15,37,16,11,43,6,46,39,14,8,40,38,36,13,26,19,23,20,27,24,31,34,32,49,52,17,44,1,7,48,0,2},
    /* 53	889	*/ {50,0,8,52,45,3,7,9,19,27,47,33,31,25,44,32,21,17,28,14,10,42,38,12,15,40,35,41,13,37,43,11,16,36,20,18,23,30,26,1,22,4,34,39,51,49,24,5,29,2,6,48,46},
    /* 53	889	*/ {46,2,7,45,1,49,21,48,6,4,28,24,31,27,25,19,8,41,38,26,32,11,44,40,12,16,42,37,9,13,39,18,15,29,36,43,14,30,23,33,20,3,17,22,47,34,52,10,5,35,50,0,51},
    /* 54	922	*/ {2,0,47,9,4,48,1,45,50,18,27,24,31,35,22,25,43,33,21,37,11,42,16,19,17,40,46,6,39,41,44,38,15,13,10,36,28,8,23,29,26,14,20,30,32,34,5,52,12,53,7,3,49,51},
    /* 55	957	*/ {51,47,52,4,2,7,53,1,48,21,28,22,19,30,35,37,31,25,32,42,16,14,17,43,10,15,6,18,13,45,39,41,38,11,34,40,49,36,26,23,27,24,46,20,33,8,0,29,12,9,5,54,44,50,3},
    /* 55	957	*/ {5,51,49,9,4,2,54,10,7,52,24,29,38,30,25,22,26,47,45,34,18,41,14,12,20,50,42,40,37,16,11,15,44,21,36,39,13,19,17,32,48,31,27,23,35,28,1,33,0,43,8,46,53,6,3},
    /* 55	957	*/ {6,50,2,53,5,47,4,10,52,33,20,29,43,21,25,28,32,24,40,16,7,17,37,42,12,39,46,44,9,38,19,14,18,45,13,11,30,36,23,31,22,34,26,1,35,49,51,27,15,8,3,41,54,48,0},
    /* 56	991	*/ {0,9,49,2,7,55,46,51,47,3,28,31,36,50,20,24,29,19,25,40,37,14,11,18,38,41,45,10,12,39,16,43,17,48,13,15,8,42,34,26,30,23,33,35,32,22,27,44,21,4,54,5,53,1,52,6},
    /* 57	1027	*/ {6,0,54,49,40,56,13,3,50,30,18,35,21,28,34,47,27,20,8,16,46,33,9,15,41,39,19,43,14,48,10,44,42,17,38,12,24,22,11,37,29,32,36,25,23,26,5,52,31,51,45,4,1,53,55,2,7},
    /* 57	1027	*/ {3,5,49,52,10,55,2,31,1,30,53,36,17,21,34,25,27,51,35,33,11,40,19,13,18,20,41,43,9,47,42,44,39,16,12,15,8,37,26,23,14,28,24,22,29,54,32,48,46,38,7,50,6,45,56,4,0},
    /* 58	1063	*/ {4,54,10,0,9,3,57,52,45,8,37,29,21,33,28,22,32,27,20,41,14,44,46,49,17,42,38,16,47,7,43,18,13,48,40,19,15,25,12,50,30,36,24,26,35,31,6,39,23,34,11,51,55,5,2,56,1,53},
    /* 59	1099	*/ {6,8,3,53,0,56,54,48,57,9,21,25,35,26,19,23,34,36,39,44,24,47,15,20,40,42,16,13,43,12,52,41,14,18,46,10,45,17,11,30,38,33,31,27,22,32,2,28,50,37,29,1,7,5,49,58,55,51,4},
    /* 60	1137	*/ {52,8,2,58,3,50,53,1,32,21,5,24,35,6,28,23,27,36,33,49,26,43,12,40,42,46,13,47,16,54,15,41,48,17,20,14,45,11,18,37,44,38,31,34,25,22,29,39,30,51,10,19,57,9,4,56,59,0,7,55},
    /* 61	1175	*/ {6,46,3,51,54,5,57,0,7,47,4,18,37,23,34,24,27,35,32,40,42,19,12,49,43,16,39,15,52,45,14,48,44,13,11,50,21,41,17,36,26,10,29,25,33,28,38,55,22,20,31,2,30,8,59,9,58,60,53,1,56},
    /* 62	1216	*/ {12,58,4,6,46,59,55,0,8,37,7,36,20,26,30,34,25,53,33,39,10,47,32,17,42,49,11,16,14,51,22,54,43,50,48,13,41,19,15,45,23,40,29,44,35,24,27,31,28,18,38,21,3,9,61,2,60,52,56,1,5,57},
    /* 62	1216	*/ {3,58,10,50,6,55,0,45,57,61,1,53,37,26,23,35,22,29,36,42,27,11,21,19,43,49,14,41,44,15,52,20,16,8,51,46,9,18,48,17,38,34,47,28,39,24,33,30,40,31,7,25,32,5,12,59,56,54,4,60,13,2},
    /* 63	1253	*/ {59,52,56,5,3,57,62,10,58,6,23,9,37,35,25,27,21,24,28,38,11,44,39,47,19,13,18,42,49,45,17,14,50,53,20,43,15,46,12,16,41,55,31,36,48,30,26,29,32,22,40,1,8,34,60,33,0,51,54,4,7,61,2},
    /* 64	1295	*/ {8,54,2,58,60,6,52,3,1,56,59,23,29,32,30,28,37,39,36,18,51,53,26,17,57,14,21,50,48,43,20,7,19,16,12,44,46,22,49,13,45,47,15,40,42,25,34,31,27,24,41,33,38,10,35,62,4,11,9,61,63,5,0,55},
    /* 64	1295	*/ {5,56,6,59,10,54,63,8,1,4,51,40,62,33,26,38,31,35,27,16,30,12,48,21,13,42,50,41,20,14,49,18,9,44,47,43,52,17,60,46,24,15,45,22,19,39,29,25,34,37,23,32,28,2,36,57,55,3,0,7,11,61,58,53},
    /* 65	1335	*/ {50,62,12,6,64,11,4,15,3,61,57,7,29,27,41,31,44,32,36,40,24,53,23,52,37,48,46,16,14,19,49,8,54,20,17,47,45,10,18,13,22,43,35,21,51,26,30,38,59,34,42,39,28,25,33,60,2,0,55,58,9,5,56,63,1},
    /* 66	1378	*/ {8,61,1,56,60,2,64,5,43,4,6,58,25,65,34,30,26,44,40,24,29,23,28,16,52,42,45,41,46,18,51,10,20,57,12,47,19,17,54,21,13,48,14,37,55,49,33,38,15,35,27,32,36,22,39,11,31,0,59,62,50,53,3,63,9,7},
    /* 66	1378	*/ {60,4,24,65,61,57,1,7,64,2,9,36,25,20,38,42,33,27,30,37,35,56,41,17,15,54,47,23,48,13,16,12,55,49,19,46,18,14,52,22,44,28,43,45,50,53,34,39,26,29,59,40,31,11,21,3,10,32,63,0,58,51,5,8,6,62},
    /* 66	1378	*/ {6,61,7,2,63,17,10,33,62,5,1,8,47,56,31,37,39,36,38,30,23,29,22,48,42,52,55,14,20,18,44,15,53,57,49,51,46,50,19,21,11,13,16,41,45,35,32,26,24,27,25,28,59,12,34,43,65,40,3,9,4,54,64,0,58,60},
    /* 67	1418	*/ {61,63,6,10,56,64,59,0,51,3,5,39,4,30,37,41,28,31,24,60,29,32,25,43,14,12,50,48,46,17,15,53,8,52,47,45,16,18,20,55,23,49,44,11,13,42,21,36,34,40,27,22,26,19,38,33,35,57,54,58,65,1,9,7,62,66,2},
    /* 68	1461	*/ {59,61,5,7,0,62,6,34,1,49,63,19,42,65,36,24,39,28,33,37,26,40,12,43,57,11,18,21,54,45,17,22,53,16,58,52,48,15,51,44,50,23,56,20,13,25,30,32,29,47,38,46,41,27,55,31,35,3,14,10,67,4,9,60,66,64,2,8},
    /* 69	1502	*/ {5,10,59,0,4,58,62,9,66,63,61,6,43,30,37,45,28,35,29,34,42,46,14,27,17,24,50,48,18,16,56,8,51,49,20,13,44,57,52,19,47,15,55,53,26,21,11,31,33,40,38,22,41,32,23,36,39,7,1,25,54,67,60,2,65,68,3,12,64},
    /* 70	1547	*/ {69,5,64,68,1,7,4,12,3,46,37,63,29,62,25,48,44,36,30,43,38,35,28,57,20,26,52,13,51,17,19,53,22,49,54,8,16,58,23,18,47,50,55,24,59,14,56,21,41,32,42,45,34,40,31,39,27,33,15,67,10,61,65,2,0,11,6,66,9,60},
    /* 71	1591	*/ {59,64,4,65,3,6,63,5,69,12,70,35,27,60,41,36,32,45,38,42,30,28,31,17,14,57,11,52,24,16,48,50,15,21,51,9,58,49,19,53,18,47,55,23,20,56,25,29,39,46,22,40,44,37,62,8,33,43,26,34,0,54,66,68,10,2,61,67,7,1,13},
    /* 72	1638	*/ {61,9,14,3,71,2,66,70,65,5,1,46,36,8,42,28,34,37,49,30,24,48,41,32,22,59,33,43,50,10,17,56,58,19,51,18,15,60,53,23,20,55,16,64,21,38,52,57,47,25,44,29,40,35,39,26,45,7,31,27,11,62,4,68,54,67,69,12,0,13,6,63},
    /* 72	1638	*/ {71,66,9,62,70,8,6,68,14,63,33,49,39,11,2,34,32,27,48,44,22,38,36,31,15,54,20,59,12,18,23,52,24,57,16,53,56,50,19,61,51,21,13,55,17,60,47,42,25,45,35,30,28,43,41,29,26,40,67,64,46,58,37,1,4,69,65,3,10,0,7,5},
    /* 72	1638	*/ {64,9,57,4,2,68,8,1,61,37,60,7,0,70,66,34,49,39,29,42,47,45,32,18,27,43,46,44,15,19,22,56,53,12,23,20,17,13,52,21,55,50,54,59,14,58,51,16,41,33,25,28,26,31,40,38,36,48,30,3,67,65,24,62,35,71,63,10,6,69,11,5},
    /* 72	1638	*/ {67,7,64,11,13,59,69,0,2,60,8,29,4,47,70,43,35,37,44,40,33,31,26,38,25,21,50,56,53,15,17,19,55,22,61,57,9,20,52,46,51,58,54,45,12,23,62,27,24,16,32,28,42,48,39,34,30,41,49,18,3,36,65,68,14,6,63,66,5,1,10,71},
    /* 73	1682	*/ {3,6,64,69,67,7,10,14,9,66,71,2,43,36,28,41,32,46,39,27,31,40,57,45,49,19,59,16,58,47,15,51,22,25,62,18,11,54,12,20,53,56,52,55,23,17,24,13,44,29,37,48,38,35,30,61,33,26,42,21,4,34,50,72,1,65,8,60,63,0,68,70,5},
    /* 74	1731	*/ {2,68,64,72,9,65,10,7,4,63,66,69,71,42,29,27,25,34,39,37,43,28,46,31,14,22,24,62,12,57,52,50,58,19,26,18,61,8,54,20,51,21,56,15,17,55,59,40,23,16,49,45,41,32,30,33,38,44,53,36,48,6,47,1,70,13,67,35,11,60,73,3,5,0},
    /* 74	1731	*/ {5,8,12,3,71,68,72,1,62,27,6,9,69,44,39,28,31,46,32,43,40,48,33,29,41,59,15,55,60,17,49,54,24,18,20,56,58,63,4,51,19,57,22,52,14,16,30,21,23,50,53,38,45,34,26,37,64,47,35,42,36,25,10,65,13,2,0,7,67,73,61,66,11,70},
    /* 75	1780	*/ {62,1,14,74,65,2,9,58,4,63,66,71,6,20,30,51,36,44,35,32,38,42,33,24,43,31,16,18,57,54,19,53,55,21,60,8,69,61,52,11,49,56,26,17,15,25,50,10,23,59,29,27,47,40,46,37,39,34,28,45,41,13,70,48,0,64,22,72,5,12,68,73,3,7,67},
    /* 75	1780	*/ {73,11,69,1,74,10,8,3,71,67,7,0,43,33,27,41,28,36,40,30,47,29,9,37,48,32,61,57,53,62,58,23,15,18,55,51,54,66,14,56,24,21,17,25,50,60,19,16,52,20,59,42,31,46,44,22,26,35,39,45,6,49,34,63,38,5,65,70,12,64,4,72,13,2,68},
    /* 76	1825	*/ {74,11,5,68,71,0,8,12,7,42,69,73,6,70,38,26,33,39,27,48,41,36,28,35,56,51,40,45,59,57,13,58,23,14,19,60,24,17,61,55,53,18,62,22,20,64,16,54,15,21,50,47,30,43,52,37,49,31,44,32,25,29,46,34,72,4,67,1,10,66,3,75,9,65,63,2},
    /* 77	1874	*/ {10,73,4,64,71,3,6,72,15,75,38,0,70,46,40,68,39,33,31,27,45,36,51,43,19,37,44,58,25,13,17,63,59,23,55,57,22,14,62,21,12,20,56,26,24,18,65,52,16,60,54,50,28,34,42,48,41,49,32,29,35,67,53,30,7,61,69,76,9,47,8,1,66,74,2,11,5},
    /* 77	1874	*/ {3,66,74,1,71,75,62,67,14,8,4,48,28,47,6,38,29,45,39,33,46,9,27,42,32,57,21,51,11,19,59,56,23,53,20,16,54,13,65,49,55,63,22,15,26,52,17,58,60,24,50,68,25,40,31,44,35,41,43,37,34,18,30,72,5,61,36,64,70,73,2,0,12,10,7,76,69},
    /* 78	1923	*/ {74,70,75,5,66,2,4,13,68,9,69,39,15,33,77,49,31,73,43,46,28,37,27,44,35,38,17,56,24,65,52,26,55,23,19,54,60,25,64,16,11,58,12,57,62,21,14,22,20,61,59,30,36,45,32,48,63,40,47,53,41,34,42,50,29,51,76,71,67,6,3,72,0,7,18,10,8,1},
    /* 78	1923	*/ {75,6,11,67,76,13,0,5,1,70,10,77,39,68,9,33,50,36,46,73,35,28,38,34,47,49,43,31,58,54,61,51,18,21,56,24,16,8,23,60,66,15,20,22,19,57,27,53,62,59,63,17,44,25,55,52,29,41,45,42,37,26,32,30,40,2,48,69,4,7,14,74,71,64,3,65,72,12},
    /* 79	1969	*/ {10,71,3,76,8,72,74,67,7,11,68,70,6,28,46,50,37,41,34,47,31,40,35,45,65,15,13,32,17,25,53,24,58,16,54,60,63,19,12,69,57,21,56,61,52,22,18,26,55,20,59,36,64,48,38,30,44,27,49,51,33,2,43,39,42,29,4,73,23,66,5,0,14,9,77,1,62,75,78},
    /* 80	2021	*/ {74,77,75,1,4,2,69,78,11,73,6,10,67,5,27,47,37,34,43,52,32,45,28,46,39,33,42,29,58,17,14,65,60,64,23,55,18,63,21,16,59,19,53,61,71,25,56,20,57,15,51,22,66,12,44,36,31,50,30,35,54,48,41,26,49,72,40,13,8,24,38,76,0,68,9,79,62,7,3,70},
    /* 81	2074	*/ {0,77,13,9,76,70,80,11,1,7,73,41,39,33,75,48,69,27,50,45,34,49,44,36,14,30,47,52,19,24,64,17,63,57,15,58,25,20,67,26,16,59,61,55,18,62,23,54,12,22,65,21,60,31,38,56,35,66,46,28,42,53,37,43,3,32,51,29,40,72,4,68,5,8,2,71,6,79,10,78,74},
    /* 82	2124	*/ {79,12,5,7,76,73,69,1,14,68,80,4,36,10,70,44,34,71,26,28,33,46,38,43,47,37,31,60,58,29,64,23,20,59,55,62,19,65,25,17,72,63,27,57,61,16,18,66,22,24,15,52,67,21,45,53,51,39,35,9,49,40,48,32,54,41,50,77,30,42,2,78,13,3,8,56,75,6,74,81,11,0},
    /* 82	2124	*/ {11,2,0,12,77,72,10,1,74,67,70,81,7,60,42,49,35,41,36,46,43,54,73,45,37,28,40,15,19,55,27,18,61,63,26,24,14,62,17,59,75,21,25,58,56,66,23,57,22,65,52,68,20,34,29,16,64,33,51,44,31,47,32,53,48,71,39,30,50,38,9,3,79,69,4,80,13,76,78,6,8,5},
    /* 83	2176	*/ {1,81,12,72,4,14,19,74,80,7,76,68,77,42,35,27,78,66,32,39,46,49,37,40,43,31,51,57,6,23,34,26,16,65,61,25,17,60,24,70,64,13,58,22,62,67,15,21,28,20,52,59,63,18,47,38,29,54,45,48,36,53,30,9,41,8,33,55,50,44,75,56,2,69,73,82,79,3,0,11,71,10,5},
    /* 83	2176	*/ {79,81,9,70,72,2,6,82,7,14,8,77,74,36,40,68,46,52,38,33,39,42,50,32,51,43,22,5,12,63,54,26,61,58,19,23,15,27,29,21,71,57,64,18,55,25,56,62,17,66,24,53,60,13,67,59,49,30,45,35,37,47,28,44,31,48,34,11,80,41,73,0,78,4,75,10,65,69,3,1,16,20,76},
    /* 84	2230	*/ {67,8,79,76,3,77,70,1,47,78,0,81,42,4,11,46,41,20,51,33,28,43,34,40,35,45,49,62,52,31,16,27,21,61,17,64,68,12,57,26,66,59,69,25,65,60,56,19,14,23,63,22,58,18,24,71,32,36,50,39,37,30,55,44,48,38,54,7,53,15,75,72,29,73,83,2,10,6,82,74,5,9,80,13},
    /* 84	2230	*/ {81,14,4,6,73,0,11,3,74,69,39,79,12,47,7,52,31,34,32,29,42,40,9,48,35,78,50,43,64,62,68,49,63,24,60,67,57,21,61,66,23,15,22,71,56,65,19,28,18,25,59,17,20,16,33,30,41,26,55,37,46,51,54,45,53,36,38,44,72,76,58,77,1,13,75,83,70,2,10,5,27,8,80,82},
    /* 84	2230	*/ {9,81,1,7,77,12,0,4,13,80,43,68,8,33,76,82,55,48,40,47,35,38,46,52,45,20,36,50,58,31,65,18,16,19,66,26,21,62,64,53,74,23,69,61,63,25,57,59,15,24,28,67,60,14,22,17,54,34,30,49,41,37,32,11,29,44,39,56,51,27,83,71,78,42,75,5,79,10,6,72,3,73,70,2},
    /* 84	2230	*/ {9,76,71,80,77,75,1,5,18,12,14,83,43,3,78,39,81,45,50,11,55,36,38,40,37,27,33,49,51,59,56,25,17,15,68,60,63,21,29,26,69,10,62,64,20,24,57,19,67,22,58,65,53,31,16,23,61,32,70,47,41,35,48,30,34,54,46,44,74,52,2,42,28,66,0,72,6,73,13,8,79,4,82,7},
    /* 85	2281	*/ {1,80,8,76,84,13,3,83,68,4,79,72,53,12,43,7,33,44,34,51,30,47,37,35,48,39,29,46,56,14,17,20,70,21,64,57,61,23,75,60,71,22,62,66,18,63,28,54,59,26,19,16,65,24,52,31,10,25,38,32,50,55,41,15,36,40,49,45,27,78,74,0,42,69,58,77,67,82,2,6,73,81,5,11,9},
    /* 86	2335	*/ {79,10,13,11,78,5,72,84,1,7,82,12,9,81,83,40,42,51,41,32,56,31,34,39,48,44,28,47,61,57,37,18,64,60,69,25,66,16,67,27,21,63,73,20,65,19,29,23,62,22,15,26,70,68,71,58,55,24,30,53,38,46,33,45,50,54,35,59,52,49,36,2,77,43,80,8,14,3,6,74,76,85,17,4,75,0},
    /* 87	2390	*/ {2,7,75,78,14,9,80,86,72,76,82,1,11,4,84,31,13,43,53,44,32,58,54,52,42,48,39,51,29,38,24,59,27,12,22,20,67,64,57,25,60,21,19,79,74,66,63,23,26,71,65,62,17,15,28,69,61,30,50,40,56,33,45,34,46,49,55,35,37,3,36,41,47,81,77,73,83,70,5,10,16,68,6,8,0,85,18},
    /* 88	2447	*/ {79,86,10,7,81,15,3,6,0,71,80,11,84,1,83,43,53,35,44,48,58,55,49,37,46,38,31,47,40,30,13,62,56,22,66,19,69,16,57,64,21,23,65,73,12,20,26,63,18,60,67,72,25,59,28,70,17,24,61,68,51,33,39,41,27,50,52,54,34,45,29,42,36,2,32,8,74,9,14,5,87,75,78,85,77,4,76,82},
    /* 89	2502	*/ {83,75,4,9,3,86,81,87,20,77,0,41,78,85,31,12,1,36,59,51,40,46,33,45,47,54,39,35,52,34,58,64,18,25,74,29,70,63,19,27,67,62,14,11,17,76,28,22,24,65,68,61,26,57,21,69,71,66,23,38,60,48,42,56,53,8,49,44,37,30,32,55,50,43,10,82,72,16,7,80,2,15,73,6,79,88,84,5,13},
    /* 90	2555	*/ {83,87,9,79,2,75,72,0,81,5,14,11,80,8,86,29,48,45,35,62,54,42,55,34,37,47,44,52,31,74,57,17,67,16,24,61,18,68,30,28,20,25,65,59,21,26,66,76,78,73,69,22,64,23,15,60,71,56,32,27,70,63,49,38,40,53,51,58,46,41,39,50,36,33,1,19,84,43,7,88,77,3,13,89,85,6,12,10,82,4},
    /* 91	2615	*/ {2,86,6,76,0,8,11,5,88,75,78,83,13,90,48,55,7,50,40,31,35,56,52,43,41,38,47,53,18,54,61,12,29,60,22,71,65,17,70,25,64,80,26,66,16,24,74,63,30,23,68,20,62,28,73,69,67,19,57,27,37,21,49,39,34,10,51,45,32,36,59,42,81,46,33,58,84,77,14,72,87,44,3,89,15,4,9,79,82,1,85},
    /* 92	2675	*/ {8,87,85,7,3,10,78,46,1,49,90,0,82,14,83,59,75,5,42,32,39,11,56,58,52,47,43,53,61,50,55,31,34,62,20,76,66,64,29,26,17,22,73,25,80,63,18,23,27,72,70,67,21,24,65,28,71,69,13,33,44,68,37,60,74,57,51,45,48,36,40,54,81,41,35,38,30,91,4,77,16,9,88,15,2,79,89,6,19,84,86,12},
    /* 93	2732	*/ {1,4,10,92,86,3,11,78,51,13,87,2,90,45,89,79,83,32,52,60,36,33,58,53,48,50,43,47,49,57,63,40,29,19,73,30,15,20,25,28,24,68,71,74,70,21,65,82,14,72,18,22,26,66,64,69,67,75,23,61,27,31,39,62,42,17,46,55,37,41,34,44,54,35,59,56,8,6,38,85,80,7,16,76,91,77,5,9,12,0,84,81,88},
    /* 93	2732	*/ {1,81,22,88,83,10,78,13,17,46,92,15,85,90,32,86,45,6,57,35,80,43,36,50,41,53,60,11,39,37,55,76,62,24,65,71,14,31,25,72,19,67,30,66,27,77,16,68,28,20,63,23,18,26,64,74,21,69,73,33,56,29,48,70,59,40,58,52,44,51,34,61,49,54,9,42,38,79,47,2,0,7,75,12,82,84,3,87,91,4,8,5,89},
    /* 94	2789	*/ {93,81,84,80,10,91,2,92,11,0,8,79,5,85,15,12,45,59,7,55,33,44,46,56,54,39,37,42,30,41,58,35,57,78,20,17,23,69,65,73,62,31,68,74,64,83,63,13,19,22,25,72,29,32,26,71,75,27,76,18,67,60,70,24,52,49,28,6,36,38,50,47,53,51,48,40,43,86,61,34,90,66,77,88,21,16,14,4,9,89,82,1,3,87},
    /* 95	2851	*/ {11,84,91,1,80,2,93,13,16,14,87,85,0,5,7,48,89,47,58,54,32,62,44,57,33,52,49,41,46,60,24,31,69,61,36,74,79,66,64,26,20,30,19,67,28,83,12,72,21,18,63,27,71,68,75,65,76,73,29,22,77,25,17,70,34,43,51,39,50,55,37,45,40,38,53,56,59,15,4,35,8,23,9,82,42,10,90,3,78,92,81,86,88,94,6},
    /* 95	2851	*/ {87,12,88,78,14,77,13,8,4,92,7,11,61,81,90,50,15,79,37,35,42,49,58,44,32,39,31,36,30,55,48,20,70,17,64,60,76,71,62,66,69,27,29,74,25,68,85,19,80,23,26,24,22,86,67,75,73,28,21,18,72,38,65,57,43,53,56,47,51,54,45,40,63,33,52,41,34,59,93,46,6,16,1,10,5,89,2,82,94,3,83,0,84,91,9},
    /* 96	2912	*/ {1,89,4,93,10,86,95,85,94,78,15,2,7,21,13,47,60,5,3,40,35,59,48,37,51,42,45,52,44,39,63,79,18,55,30,72,64,77,74,69,29,25,73,61,19,28,75,70,82,8,24,71,76,66,27,31,67,26,20,68,17,65,23,34,41,33,58,32,50,62,36,38,53,43,46,54,56,12,6,57,92,88,0,83,11,9,49,84,91,14,80,22,90,87,81,16},
    /* 96	2912	*/ {1,11,89,8,4,0,94,83,93,79,92,62,87,3,52,80,15,61,49,35,59,36,48,37,47,58,33,38,53,63,50,76,40,20,22,26,73,21,24,66,23,71,82,75,25,69,67,29,27,78,14,17,64,72,32,68,74,28,16,18,77,70,31,19,56,39,60,44,65,41,45,51,57,46,34,42,30,7,43,55,86,13,5,85,54,12,84,2,91,9,6,95,81,10,90,88},
    /* 97	2967	*/ {89,4,84,11,90,1,85,83,95,16,47,91,87,0,9,6,2,32,36,44,39,61,56,51,53,41,59,49,37,52,57,67,77,25,33,70,17,78,35,65,71,73,30,21,26,75,29,24,20,13,19,72,27,66,68,79,76,23,63,69,28,22,64,74,81,45,18,40,62,58,55,42,46,43,50,54,60,31,34,38,80,15,88,48,96,7,14,8,5,12,94,92,82,86,3,93,10},
    /* 98	3032	*/ {3,91,17,4,97,5,2,81,20,95,88,9,87,93,19,37,41,96,53,42,64,90,59,44,34,61,39,51,54,46,32,45,36,40,43,21,74,77,70,24,67,71,75,72,22,73,26,23,12,80,84,28,68,16,29,25,18,76,69,30,27,79,82,31,33,38,55,57,60,56,49,52,63,66,58,47,50,13,7,85,62,35,65,48,78,10,94,86,8,11,1,14,89,0,15,83,6,92},
    /* 99	3098	*/ {2,88,12,93,84,51,3,98,9,95,80,90,10,7,86,38,11,6,63,39,34,43,50,47,37,41,57,33,45,40,68,87,59,62,73,78,23,30,70,81,22,74,67,69,36,29,65,16,83,79,26,72,27,18,24,32,19,28,76,25,17,21,77,75,60,64,71,55,35,52,44,56,53,46,42,31,54,49,58,13,66,89,61,92,48,14,0,91,5,8,97,94,82,1,85,15,96,20,4},
    /* 100	3153	*/ {96,11,88,82,2,94,99,13,95,14,18,89,6,8,90,86,3,50,56,42,64,45,91,53,40,34,37,44,10,41,52,46,21,58,38,67,70,20,81,30,75,69,78,22,29,33,77,28,68,76,71,80,27,15,32,73,25,83,72,24,79,74,26,17,31,62,23,66,61,55,47,63,35,39,48,43,60,49,36,59,12,51,84,54,57,85,1,7,5,65,19,98,93,4,97,16,92,87,0,9}
};

void init0(const vector<int> & queenRows, const vector<int> & queenCols)
{
    offsetr = 0;
    offsetc = 0;
    N = (int)queenRows.size();
    for (int r = 0; r < N; ++r)
        for (int c = 0; c < N; ++c)
            H[r][c] = max(0, max(max(abs(r-N/2), abs(r-N/2))-maxr/2,
                                 max(abs(c-N/2), abs(c-N/2))-maxc/2));
    for (int i = 0; i < N; ++i)
    {
        maxr = max(queenRows[i], maxr);
        maxc = max(queenCols[i], maxc);
    }
}

void init1(const vector<int> & queenRows, const vector<int> & queenCols)
{
    for (int i = 0; i < N; ++i)
    {
        QR[i] = queenRows[i]-maxr/2+MAXN+offsetr;
        QC[i] = queenCols[i]-maxc/2+MAXN+offsetc;
    }
}

void dump()
{
    for (int i = 0; i < N; ++i) cout << '_';
    cout << ' ' << constraints << endl;
    for (int i = 0; i < N; ++i)
    {
        for (int j = 0; j < BR[i]; ++j) cout << '.';
        cout << 'X';
        for (int j = BR[i]+1; j < N; ++j) cout << '.';
        cout << endl;
    }
}

bool findnqueens(Timer & timer)
{
    while (true)
    {
        memset(&BD, 0, sizeof(BD));
        memset(&BC, 0, sizeof(BC));
        memset(&BD2, 0, sizeof(BD2));
        constraints = 0;
        pscore = 0;
        for (int i = 0; i < N; ++i)
        {
            int bestc = 1<<29;
            int bestj = -1;
            for (int k = 0; k < 10; ++k)
            {
                int j = rand() % N;
                int c = 1000000*BC[j] + BD[i+j] + BD2[i-j+N];
                if (c < bestc)
                {
                    bestc = c;
                    bestj = j;
                }
            }
            for (int j = 0; j < N; ++j)
            {
                int c = 1000000*BC[j] + BD[i+j] + BD2[i-j+N];
                if (c < bestc)
                {
                    bestc = c;
                    bestj = j;
                }
            }
            BR[i] = bestj;
            BC[bestj]++;
            BD[i+bestj]++;
            BD2[i-bestj+N]++;
            constraints += bestc;
            // pscore += max(abs(i-N/2), abs(BR[i]-N/2));
            pscore += H[i][BR[i]];
        }

        for (int i = 0; i < 1e6; ++i)
        {
            int a;
            int b;
            do
            {
                a = rand() % N;
                b = rand() % N;
            } while (a == b);

            BD[a+BR[a]]--;
            BD2[a-BR[a]+N]--;
            int dc = -BD[a+BR[a]] - BD2[a-BR[a]+N];

            BD[b+BR[b]]--;
            BD2[b-BR[b]+N]--;
            dc -= BD[b+BR[b]] + BD2[b-BR[b]+N];

            // int dpscore = (max(abs(a-N/2), abs(BR[b]-N/2)) + max(abs(b-N/2), abs(BR[a]-N/2))) -
            // (max(abs(a-N/2), abs(BR[a]-N/2)) + max(abs(b-N/2), abs(BR[b]-N/2)));
            int dpscore = (H[a][BR[b]] + H[b][BR[a]]) - (H[a][BR[a]] + H[b][BR[b]]);

            swap(BR[a], BR[b]);

            dc += BD[a+BR[a]] + BD2[a-BR[a]+N];
            BD[a+BR[a]]++;
            BD2[a-BR[a]+N]++;

            dc += BD[b+BR[b]] + BD2[b-BR[b]+N];
            BD[b+BR[b]]++;
            BD2[b-BR[b]+N]++;

            if (dc < 0 || (dc == 0 && exp(-dpscore / 1.) > nextDouble()) || (N < 50 && nextInt(2*N*N) == 0))
            {
                constraints += dc;
                pscore += dpscore;
                if (constraints == 0)
                    return true;
            }
            else
            {
                BD[a+BR[a]]--;
                BD2[a-BR[a]+N]--;
                BD[b+BR[b]]--;
                BD2[b-BR[b]+N]--;
                swap(BR[a], BR[b]);
                BD[a+BR[a]]++;
                BD2[a-BR[a]+N]++;
                BD[b+BR[b]]++;
                BD2[b-BR[b]+N]++;
            }
        }
        if (timer.left() < .2) return false;
    }
}

int LAR[MAXN];
int LAC[MAXN];
int cost[MAXN][MAXN];
int xy[MAXN];
int yx[MAXN];
int destR[MAXN];
int destC[MAXN];
int linearAssignement()
{
    int mincost = 0;
    int reduction[MAXN];
    int matches[MAXN];

    memset(&matches, 0, N * sizeof(int));

    for (int y = 0; y < N; y++)
    {
        mincost = cost[0][y];
        int xmin = 0;
        for (int x = 1; x < N; x++)
            if (mincost > cost[x][y])
            {
                mincost = cost[x][y];
                xmin = x;
            }
        reduction[y] = mincost;

        if (++matches[xmin] == 1)
        {
            xy[xmin] = y;
            yx[y] = xmin;
        }
        else
            yx[y] = -1;
    }

    int nbfree = 0;
    int freeRows[MAXN];
    for (int x = 0; x < N; x++)
        if (matches[x] == 0)
            freeRows[nbfree++] = x;
        else if (matches[x] == 1)
        {
            int y1 = xy[x];
            mincost = numeric_limits<int>::max();
            for (int y = 0; y < N; y++)
                if (y != y1)
                    mincost = min(mincost, cost[x][y] - reduction[y]);
            reduction[y1] -= mincost;
        }

    for (int l = 0; l < 2; ++l)
    {
        int k = 0;
        int oldfree = nbfree;
        nbfree = 0;
        while (k < oldfree)
        {
            int x = freeRows[k];
            k++;

            int umin = cost[x][0] - reduction[0];
            int y1 = 0;
            int y2 = 0;
            int usubmin = numeric_limits<int>::max();
            for (int y = 1; y < N; y++)
            {
                int h = cost[x][y] - reduction[y];
                if (h < usubmin)
                {
                    if (h >= umin)
                    {
                        usubmin = h;
                        y2 = y;
                    }
                    else
                    {
                        usubmin = umin;
                        umin = h;
                        y2 = y1;
                        y1 = y;
                    }
                }
            }

            int x0 = yx[y1];
            if (umin < usubmin)
                reduction[y1] = reduction[y1] - (usubmin - umin);
            else if (x0 >= 0)
            {
                y1 = y2;
                x0 = yx[y2];
            }

            xy[x] = y1;
            yx[y1] = x;

            if (x0 >= 0)
            {
                if (umin < usubmin)
                    freeRows[--k] = x0;
                else
                    freeRows[nbfree++] = x0;
            }
        }
    }

    int last = 0;
    int d[MAXN];
    int pred[MAXN];
    int collist[MAXN];
    for (int f = 0; f < nbfree; f++)
    {
        int freeRow = freeRows[f];
        int end;
        for (int y = 0; y < N; y++)
        {
            d[y] = cost[freeRow][y] - reduction[y];
            pred[y] = freeRow;
            collist[y] = y;
        }

        int back = 0;
        int front = 0;
        bool found = false;
        do
        {
            if (front == back)
            {
                last = back - 1;
                mincost = d[collist[front++]];
                for (int k = front; k < N; k++)
                {
                    int y = collist[k];
                    int h = d[y];
                    if (h <= mincost)
                    {
                        if (h < mincost)
                        {
                            front = back;
                            mincost = h;
                        }
                        collist[k] = collist[front];
                        collist[front++] = y;
                    }
                }
                for (int k = back; k < front; k++)
                    if (yx[collist[k]] == -1)
                    {
                        end = collist[k];
                        found = true;
                        break;
                    }
            }

            if (!found)
            {
                int y1 = collist[back++];
                int x = yx[y1];
                int h = cost[x][y1] - reduction[y1] - mincost;

                for (int k = front; k < N; k++)
                {
                    int y = collist[k];
                    int v2 = cost[x][y] - reduction[y] - h;
                    if (v2 < d[y])
                    {
                        pred[y] = x;
                        if (v2 == mincost)
                        {
                            if (yx[y] == -1)
                            {
                                end = y;
                                found = true;
                                break;
                            }
                            else
                            {
                                collist[k] = collist[front];
                                collist[front++] = y;
                            }
                        }
                        d[y] = v2;
                    }
                }
            }
        }
        while (!found);

        for (int k = 0; k <= last; k++)
            reduction[collist[k]] += d[collist[k]] - mincost;

        int x;
        do
        {
            x = pred[end];
            yx[end] = x;
            swap(end, xy[x]);
        }
        while (x != freeRow);
    }

    int res = 0;
    for (int x = 0; x < N; x++)
        res += cost[x][xy[x]];

    return res;
}

bool inside(int fromr, int fromc, int tor, int toc, int r2, int c2)
{
    int dr = tor - fromr;
    int dc = toc - fromc;
    int r = fromr;
    int c = fromc;
    while (dr != 0 || dc != 0)
    {
        int udr = (dr>0)-(dr<0);
        int udc = (dc>0)-(dc<0);
        r += udr;
        c += udc;
        dr -= udr;
        dc -= udc;
        if (r == r2 && c == c2) return true;
    }
    return false;
}

int O[MAXN];
vector<string> ret;
int assignla()
{
    for (int i = 0; i < N; ++i)
    {
        LAR[i] = BR[i] - N/2 + MAXN;
        LAC[i] = i - N/2 + MAXN;
    }
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N; ++j)
            cost[i][j] = max(abs(LAC[j]-QC[i]), abs(LAR[j]-QR[i]));
    int score = linearAssignement();
    for (int i = 0; i < N; ++i)
    {
        destR[i] = LAR[xy[i]];
        destC[i] = LAC[xy[i]];
        // cout << "[" << QR[i] << " " << QC[i] << "] [" << destR[i] << " " << destC[i] << "]" << endl;
    }
    return score;
}

bool makeret()
{
    ret.clear();
    for (int i = 0; i < N; ++i)
        O[i] = i;
    bool conflict;
    int trials = 0;
    do
    {
        if (trials++ == 1000) return false;
        conflict = false;
        for (int i = 0; i < N; ++i)
            for (int j = 0; j < N; ++j)
                if (i != j)
                {
                    int q1 = O[i];
                    int q2 = O[j];
                    bool srcin = inside(QR[q1], QC[q1], destR[q1], destC[q1], QR[q2], QC[q2]);
                    bool destin = inside(QR[q1], QC[q1], destR[q1], destC[q1], destR[q2], destC[q2]);
                    if (srcin && destin)
                    {
                        swap(destR[q1], destR[q2]);
                        swap(destC[q1], destC[q2]);
                        swap(O[q1], O[q2]);
                        conflict = true;
                        break;
                    }
                    if (srcin && i < j)
                    {
                        swap(O[i], O[j]);
                        conflict = true;
                        break;
                    }
                    if (destin && i > j)
                    {
                        swap(O[i], O[j]);
                        conflict = true;
                        break;
                    }
                }
    } while (conflict);

    for (int i = 0; i < N; ++i)
    {
        int q = O[i];
        int dr = destR[q] - QR[q];
        int dc = destC[q] - QC[q];
        int udr = (dr>0)-(dr<0);
        int udc = (dc>0)-(dc<0);
        int dd = min(abs(dr), abs(dc));
        QR[q] += maxr/2 - MAXN - offsetr;
        QC[q] += maxc/2 - MAXN - offsetc;
        if (dd)
        {
            QR[q] = QR[q]+udr*dd;
            QC[q] = QC[q]+udc*dd;
            dr -= udr*dd;
            dc -= udc*dd;
            ret.push_back(to_string(q) + ' ' + to_string(QR[q]) + ' ' + to_string(QC[q]));
            // cout << ret.back() << endl;
        }
        if (dr)
        {
            QR[q] = QR[q]+dr;
            ret.push_back(to_string(q) + ' ' + to_string(QR[q]) + ' ' + to_string(QC[q]));
            // cout << ret.back() << endl;
        }
        if (dc)
        {
            QC[q] = QC[q]+dc;
            ret.push_back(to_string(q) + ' ' + to_string(QR[q]) + ' ' + to_string(QC[q]));
            // cout << ret.back() << endl;
        }
    }
    return true;
}

int iter;
class MovingNQueens
{
public:
Timer timer;

vector<string> rearrange(const vector<int> & queenRows, const vector<int> & queenCols)
{
    int bestscore;
    init0(queenRows, queenCols);

    bestscore = 1<<29;

    for (int p = 0; p < (int)precomputed.size(); ++p)
    {
        if ((int)precomputed[p].size() == N)
        {
            for (int i = 0; i < N; ++i)
                BR[i] = precomputed[p][i];

            int tmp[MAXN];
            for (offsetr = -3; offsetr < 3; ++offsetr)
                for (offsetc = -3; offsetc < 3; ++offsetc)
                    for (int k = 0; k < 8; ++k)
                    {
                        init1(queenRows, queenCols);
                        if ((k&1) == 1)
                        {
                            memcpy(tmp, BR, sizeof(BR));
                            for (int i = 0; i < N; ++i)
                                BR[i] = N-tmp[i]-1;
                        }
                        if ((k&3) == 2)
                        {
                            memcpy(tmp, BR, sizeof(BR));
                            for (int i = 0; i < N; ++i)
                                BR[N-i-1] = tmp[i];
                        }
                        if ((k&7) == 4)
                        {
                            memcpy(tmp, BR, sizeof(BR));
                            for (int i = 0; i < N; ++i)
                                BR[tmp[i]] = i;
                        }
                        int score = assignla();
                        if (score < bestscore)
                            if (makeret()) bestscore = score;
                    }
        }
    }

    for (iter = 0; timer.left() > .2; ++iter)
    {
        if (findnqueens(timer))
        {
            init1(queenRows, queenCols);
            int tmp[MAXN];
            for (offsetr = -1; offsetr < 1; ++offsetr)
                for (offsetc = -1; offsetc < 1; ++offsetc)
                    for (int k = 0; k < 8; ++k)
                    {
                        init1(queenRows, queenCols);
                        if ((k&1) == 1)
                        {
                            memcpy(tmp, BR, sizeof(BR));
                            for (int i = 0; i < N; ++i)
                                BR[i] = N-tmp[i]-1;
                        }
                        if ((k&3) == 2)
                        {
                            memcpy(tmp, BR, sizeof(BR));
                            for (int i = 0; i < N; ++i)
                                BR[N-i-1] = tmp[i];
                        }
                        if ((k&7) == 4)
                        {
                            memcpy(tmp, BR, sizeof(BR));
                            for (int i = 0; i < N; ++i)
                                BR[tmp[i]] = i;
                        }
                        int score = assignla();
                        if (score < bestscore)
                            if (makeret()) bestscore = score;
                    }
            int score = assignla();
            // cout << pscore << " " << score << endl;
            if (score < bestscore)
            {
                bestscore = score;
                // cout << pscore << endl;
                makeret();
            }
        }
    }

    // cout << iter << endl;
    return ret;
}
};

typedef MovingNQueens MM;
